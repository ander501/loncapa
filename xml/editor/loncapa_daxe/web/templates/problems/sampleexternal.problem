<?xml version="1.0" encoding="UTF-8"?>
<loncapa>
  <problem id="problem1">
    <part id="part1">
      <parameter name="externalurl" type="string" description="URL for external testing"/>
      <perl><![CDATA[
sub fact {
   my $n=shift;
   if ($n==1) {
      return $n;
   } else {
      return $n*&fact($n-1);
   }
}

$testvalues='0=1';
foreach $i (1..3) {
   $rand=&random(3,8,1);
   $testvalues.=','.$rand.'='.&fact($rand);
}

#
# Set anything else you want to pass in this hash.
# Name-value pairs will be passed as posted form parameters.
#
%args=('somecode' => (<<'ENDCODE')
sub negative {
   my ($number)=@_;
   return $number<0;
}
ENDCODE
);
# Get a URL if it is externally set
$externalurl=&parameter_setting('externalurl');
#
# Important: set your default URL here
#
unless ($externalurl=~/\w/) { $externalurl='http://localhost/cgi-bin/sampleexternal.pl'; }
#
]]></perl>
      <p>Write a Perl subroutine called <tt>factorial</tt>, which returns the factorial of its argument, e.g. <tt>&amp;factorial(17)=17!</tt>. You can use the
        boolean function <tt>&amp;negative(number)</tt>, which returns <tt>true</tt> if the argument is negative.</p>
      <instructorcomment>
        <p>Sample code for an evaluation script can be found <a href="/res/adm/includes/templates/sampleexternal.pl">here.</a></p>
      </instructorcomment>
      <externalresponse url="$externalurl" answer="$testvalues" form="%args" answerdisplay="The most elegant (and dangerous) solution is recursive.">
        <textfield/>
      </externalresponse>
    </part>
  </problem>
</loncapa>
